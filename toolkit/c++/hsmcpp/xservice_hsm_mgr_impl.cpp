/*****************************************
* Copyright (C) 2020 * Ltd. All rights reserved.
* 
* File name   : xservice_hsm_mgr.c
* Author      : longbin
* Created date: 2020-08-05 15:08:52
* Description : 
*
*******************************************/

#include <cstdio>
#include <cstring>
#include <cassert>
#include "xservice_hsm_mgr_event.h"
#include "xservice_hsm_mgr_impl.h"
#include "hsm_engine.h"

#define DBG_ASSERT(x) assert(x)

typedef struct XServiceHsmObject_T {
    //HSM_StateChart_T statechart;
    char working_data[1024];
    char extra_data[1024];
} XServiceHsmObject_T;
static XServiceHsmObject_T gs_xservice_hsm_object;

/*
 * The following prototypes were auto-generated by gen_hsm;
 * these are the action functions for StateMachine Default_StateMachine.
 */
void proc_1(const HSM_StateChart_T &statechart);
void proc_2(const HSM_StateChart_T &statechart);
void proc_3(const HSM_StateChart_T &statechart);

/*
 * The following prototypes were auto-generated by gen_hsm;
 * these are the guard functions for StateMachine Default_StateMachine.
 */


/*
 * implement declared functions auto-generated by gen_hsm here
 */
void onError(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    char const* pevt_data = (const char *)statechart.eventdata.data();
    printf("\r[%d-%s] [%s]: Invalid char %d(%c)\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pevt_data[0], pevt_data[0]);
    printf("\t\thas ignored, please continue input\n");
    printf("%s", pobj->working_data); fflush(stdout);
}

void onInterupt1(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    printf("\n%s entry reading dec:%s, str:%s\n", __func__, pobj->working_data, pobj->extra_data);
}

void onInterupt2(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    printf("\n%s exit reading dec:%s, str:%s\n", __func__, pobj->working_data, pobj->extra_data);
}

void proc_close(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    printf("\n%s %s has been cleared\n", __func__, pobj->extra_data);
}

void proc_decimal(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    char const* pevt_data = (const char *)statechart.eventdata.data();
    strncat(pobj->working_data, pevt_data, 1);
    printf("\r[%d-%s] [%s]: Invalid char %d(%c)\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pevt_data[0], pevt_data[0]);
    printf("\tvalidity, you can continue type 0123456789\n");
    printf("%s", pobj->working_data); fflush(stdout);
}

void proc_dot(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    char const* pevt_data = (char const *)(statechart.eventdata.data());
    strncat(pobj->working_data, pevt_data, 1);
    printf("\r[%d-%s] [%s]: Invalid char %d(%c)\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pevt_data[0], pevt_data[0]);
    printf("\tuncompleted, you can continue type 0123456789\n");
    printf("%s", pobj->working_data); fflush(stdout);
}

void proc_int(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    char const* pevt_data = (char const *)(statechart.eventdata.data());
    strncat(pobj->working_data, pevt_data, 1);
    printf("\r[%d-%s] [%s]: Invalid char %d(%c)\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pevt_data[0], pevt_data[0]);
    printf("\tvalidity, you can continue type 0123456789.\n");
    printf("%s", pobj->working_data); fflush(stdout);
}

void proc_lead0(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    char const* pevt_data = (char const *)(statechart.eventdata.data());
    strncat(pobj->working_data, pevt_data, 1);
    printf("\r[%d-%s] [%s]: Invalid char %d(%c)\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pevt_data[0], pevt_data[0]);
    printf("\tvalidity, you can continue type .\n");
    printf("%s", pobj->working_data); fflush(stdout);
}

void proc_open(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    memset(pobj->extra_data, 0, sizeof(pobj->extra_data));
    printf("%s please input your string\n", __func__);
}

void proc_reading(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    char const* pevt_data = (char const *)(statechart.eventdata.data());
    strncat(pobj->extra_data, pevt_data, 1);
    printf("\r[%d-%s] [%s]: Invalid char %d(%c)\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pevt_data[0], pevt_data[0]);
    printf("%s", pobj->extra_data); fflush(stdout);
}

void proc_signed(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    char const* pevt_data = (char const *)(statechart.eventdata.data());
    strncat(pobj->working_data, pevt_data, 1);
    printf("\r[%d-%s] [%s]: Invalid char %d(%c)\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pevt_data[0], pevt_data[0]);
    printf("\tuncompleted, you can continue type 0123456789\n");
    printf("%s", pobj->working_data); fflush(stdout);
}

void prompt_none(const HSM_StateChart_T& statechart) {
    (void)statechart;
    printf("Welcome, please type +-0123456789\n");
}

void prompt_reset(const HSM_StateChart_T& statechart) {
    (void)statechart;
    printf("restart, please type +-0123456789\n");
}

void resulted(const HSM_StateChart_T& statechart) {
    XServiceHsmObject_T * pobj = (XServiceHsmObject_T *)statechart.userObj;
    printf("\r[%d-%s] [%s]: %s\n",
            statechart.currentStateId, statechart.currentStateName.c_str(),
            __func__, pobj->working_data);
    memset(pobj->working_data, 0, sizeof(pobj->working_data));
}

std::string getEventName(int event) {
    switch (event) {
        EVENT2STRS
        default:
            break;
    } 
    return "unknown";
}

/* create HSM engine and state chart */
HSM_Engine *mHsm = new HSM_Engine();

//auto generate from state of STATECHART_DEFN
enum {
    Init,
    STATE_READING,
    STATE_WORKING,
    STATE_CLOSE,
    STATE_SHALLOW_HIST,
    STATE_OPEN,
    STATE_PAGEX,
    STATE_DEEP_HIST,
    STATE_RESTART,
    STATE_TYPING,
    STATE_EMPTY,
    STATE_DECIMAL,
    STATE_INTEGER,
    STATE_LEAD0,
    STATE_SIGNED,
};

bool build_state_table(HSM_State_Definition_T &dfn) {
    std::vector<HSM_State_T> stateList;
//#define HSM_BEGIN(name) dfn.statechartName = #name;
    dfn.statechartName = "XSERVICE_MGR_HSM";
    //build state table here
    //HSM_State_T(kind, name, parent, initial, history, entry, exit)
  /*=================== STATE: Init ===============================*/
//#define HSM_INITIAL_STATE(state, parent, action, next_state)
    HSM_State_T state_Init(HSM_SKIND_INITIAL, Init, "Init", HSM_TOP, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", ""); //add init state first
    //{{HSM_NO_EVENT,HSM_NO_GUARD,action,next_state,NULL, "", #action}}
    std::vector<HSM_Transition_T> state_Init_Trans={
        {HSM_NO_EVENT,HSM_NO_GUARD,prompt_none,STATE_EMPTY,HSM_NO_HISTORY_STATE, "", "prompt_none"},
    };
    state_Init.setTransTable(state_Init_Trans);
    stateList.push_back(state_Init);
  /*=================== STATE: STATE_READING ===============================*/
//#define HSM_COMPOSITE_STATE(STATE_READING, HSM_TOP, HSM_NO_INITIAL_STATE, STATE_SHALLOW_HIST, HSM_NO_ACTION, HSM_NO_ACTION)
  //HSM_COMPOSITE_STATE(STATE_READING, HSM_TOP, HSM_NO_INITIAL_STATE, STATE_SHALLOW_HIST, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_READING(HSM_SKIND_COMPOSITE, STATE_READING, "STATE_READING", HSM_TOP, HSM_NO_INITIAL_STATE, STATE_SHALLOW_HIST, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
//#define HSM_COMPLETION_TRANSITION(HSM_NO_ACTION, STATE_DEEP_HIST) {HSM_COMPLETION_EVENT, HSM_NO_GUARD, action, next_state, NULL, "", #action}
//define HSM_TRANSITION(event,guard,action,next_state) {event, guard, action, next_state, NULL, #guard, #action},
    //HSM_COMPLETION_TRANSITION(HSM_NO_ACTION, STATE_DEEP_HIST)
    //HSM_TRANSITION(EVT_TypedKeyPound, HSM_NO_GUARD, onInterupt2, STATE_DEEP_HIST)
    std::vector<HSM_Transition_T> state_STATE_READING_Trans = {
        {HSM_COMPLETION_EVENT,HSM_NO_GUARD,HSM_NO_ACTION,STATE_DEEP_HIST,HSM_NO_HISTORY_STATE, "", ""},
        {EVT_TypedKeyPound, HSM_NO_GUARD, onInterupt2, STATE_DEEP_HIST, HSM_NO_HISTORY_STATE, "", "onInterupt2"},
    };
  //HSM_END_STATE(STATE_READING)
    state_STATE_READING.setTransTable(state_STATE_READING_Trans);
    stateList.push_back(state_STATE_READING);


  /*=================== STATE: STATE_WORKING ===============================*/
//  HSM_COMPOSITE_STATE(STATE_WORKING, HSM_TOP, HSM_NO_INITIAL_STATE, STATE_DEEP_HIST, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_WORKING(HSM_SKIND_COMPOSITE, STATE_WORKING, "STATE_WORKING", HSM_TOP, HSM_NO_INITIAL_STATE, STATE_DEEP_HIST,HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    //HSM_TRANSITION(EVT_TypedKeyPound, HSM_NO_GUARD, onInterupt1, STATE_SHALLOW_HIST)
    std::vector<HSM_Transition_T> state_STATE_WORKING_Trans = {
        {EVT_TypedKeyPound, HSM_NO_GUARD, onInterupt1, STATE_SHALLOW_HIST, HSM_NO_HISTORY_STATE, "", "onInterupt1"},
    };
  //HSM_END_STATE(STATE_WORKING)
    state_STATE_WORKING.setTransTable(state_STATE_WORKING_Trans);
    stateList.push_back(state_STATE_WORKING);

  /*=================== STATE: STATE_CLOSE ===============================*/
  //HSM_FINAL_STATE(STATE_CLOSE, STATE_READING)
    HSM_State_T state_STATE_CLOSE(HSM_SKIND_FINAL, STATE_CLOSE, "STATE_CLOSE", STATE_READING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE,HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    stateList.push_back(state_STATE_CLOSE);

  /*=================== STATE: STATE_SHALLOW_HIST ===============================*/
  //HSM_SHALLOW_HISTORY_STATE(STATE_SHALLOW_HIST, STATE_READING, STATE_OPEN)
    HSM_State_T state_STATE_SHALLOW_HIST(HSM_SKIND_SHALLOW_HISTORY, STATE_SHALLOW_HIST, "STATE_SHALLOW_HIST", STATE_READING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    std::vector<HSM_Transition_T> state_STATE_SHALLOW_HIST_Trans = {
        {HSM_NO_EVENT,HSM_NO_GUARD,HSM_NO_ACTION,STATE_OPEN,STATE_OPEN, "", ""},
    };
    state_STATE_SHALLOW_HIST.setTransTable(state_STATE_SHALLOW_HIST_Trans);
    stateList.push_back(state_STATE_SHALLOW_HIST);

  /*=================== STATE: STATE_OPEN ===============================*/
  //HSM_JUNCTION_STATE(STATE_OPEN, STATE_READING)
    HSM_State_T state_STATE_OPEN(HSM_SKIND_JUNCTION, STATE_OPEN, "STATE_OPEN", STATE_READING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    //HSM_TRANSITION(HSM_NO_EVENT, HSM_NO_GUARD, proc_open, STATE_PAGEX)
    std::vector<HSM_Transition_T> state_STATE_OPEN_Trans = {
        {HSM_NO_EVENT, HSM_NO_GUARD, proc_open, STATE_PAGEX, HSM_NO_HISTORY_STATE, "", "proc_open"},
    };
  //HSM_END_STATE(STATE_OPEN)
    state_STATE_OPEN.setTransTable(state_STATE_OPEN_Trans);
    stateList.push_back(state_STATE_OPEN);

  /*=================== STATE: STATE_PAGEX ===============================*/
  //HSM_SIMPLE_STATE(STATE_PAGEX, STATE_READING, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_PAGEX(HSM_SKIND_SIMPLE, STATE_PAGEX, "STATE_PAGEX", STATE_READING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    //HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber0, HSM_NO_GUARD, proc_reading)
    //HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_reading)
    //HSM_INTERNAL_TRANSITION(EVT_TypedKeyOther, HSM_NO_GUARD, proc_reading)
    //HSM_INTERNAL_TRANSITION(EVT_TypedKeySign, HSM_NO_GUARD, proc_reading)
    //HSM_TRANSITION(EVT_TypedKeyEnter, HSM_NO_GUARD, proc_close, STATE_CLOSE)
    std::vector<HSM_Transition_T> state_STATE_PAGEX_Trans = {
        {EVT_TypedKeyNumber0,HSM_NO_GUARD,proc_reading,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_reading"},
        {EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_reading,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_reading"},
        {EVT_TypedKeyOther, HSM_NO_GUARD, proc_reading,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_reading"},
        {EVT_TypedKeySign, HSM_NO_GUARD, proc_reading,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_reading"},
        {EVT_TypedKeyEnter, HSM_NO_GUARD, proc_close, STATE_CLOSE, HSM_NO_HISTORY_STATE, "", "proc_close"},
    };
  //HSM_END_STATE(STATE_PAGEX)
    state_STATE_PAGEX.setTransTable(state_STATE_PAGEX_Trans);
    stateList.push_back(state_STATE_PAGEX);

  /*=================== STATE: STATE_DEEP_HIST ===============================*/
  //HSM_DEEP_HISTORY_STATE(STATE_DEEP_HIST, STATE_WORKING, STATE_RESTART)
    HSM_State_T state_STATE_DEEP_HIST(HSM_SKIND_DEEP_HISTORY, STATE_DEEP_HIST, "STATE_DEEP_HIST", STATE_WORKING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    std::vector<HSM_Transition_T> state_STATE_DEEP_HIST_Trans = {
        {HSM_NO_EVENT,HSM_NO_GUARD,HSM_NO_ACTION,STATE_RESTART,STATE_RESTART, "", ""},
    };
    state_STATE_DEEP_HIST.setTransTable(state_STATE_DEEP_HIST_Trans);
    stateList.push_back(state_STATE_DEEP_HIST);

  /*=================== STATE: STATE_RESTART ===============================*/
  //HSM_JUNCTION_STATE(STATE_RESTART, STATE_WORKING)
    HSM_State_T state_STATE_RESTART(HSM_SKIND_JUNCTION, STATE_RESTART, "STATE_RESTART", STATE_WORKING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    //HSM_TRANSITION(HSM_NO_EVENT, HSM_NO_GUARD, prompt_reset, STATE_EMPTY)
    std::vector<HSM_Transition_T> state_STATE_RESTART_Trans = {
        {HSM_NO_EVENT, HSM_NO_GUARD, prompt_reset, STATE_EMPTY, HSM_NO_HISTORY_STATE, "", "prompt_reset"},
    };
  //HSM_END_STATE(STATE_RESTART)
    state_STATE_RESTART.setTransTable(state_STATE_RESTART_Trans);
    stateList.push_back(state_STATE_RESTART);


  /*=================== STATE: STATE_TYPING ===============================*/
  // HSM_COMPOSITE_STATE(STATE_TYPING, STATE_WORKING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_TYPING(HSM_SKIND_COMPOSITE, STATE_TYPING, "STATE_TYPING", STATE_WORKING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyDot, HSM_NO_GUARD, onError)
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyOther, HSM_NO_GUARD, onError)
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeySign, HSM_NO_GUARD, onError)
    // HSM_TRANSITION(EVT_TypedKeyEnter, HSM_NO_GUARD, resulted, STATE_RESTART)
    std::vector<HSM_Transition_T> state_STATE_TYPING_Trans = {
        {EVT_TypedKeyDot,HSM_NO_GUARD,onError,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "onError"},
        {EVT_TypedKeyOther,HSM_NO_GUARD,onError,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "onError"},
        {EVT_TypedKeySign,HSM_NO_GUARD,onError,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "onError"},
        {EVT_TypedKeyEnter, HSM_NO_GUARD, resulted, STATE_RESTART, HSM_NO_HISTORY_STATE, "", "resulted"},
    };
  // HSM_END_STATE(STATE_TYPING)
    state_STATE_TYPING.setTransTable(state_STATE_TYPING_Trans);
    stateList.push_back(state_STATE_TYPING);

  /*=================== STATE: STATE_EMPTY ===============================*/
  // HSM_SIMPLE_STATE(STATE_EMPTY, STATE_WORKING, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_EMPTY(HSM_SKIND_SIMPLE, STATE_EMPTY, "STATE_EMPTY", STATE_WORKING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyDot, HSM_NO_GUARD, onError)
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyEnter, HSM_NO_GUARD, prompt_reset)
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyOther, HSM_NO_GUARD, onError)
    // HSM_TRANSITION(EVT_TypedKeyNumber0, HSM_NO_GUARD, proc_lead0, STATE_LEAD0)
    // HSM_TRANSITION(EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_int, STATE_INTEGER)
    // HSM_TRANSITION(EVT_TypedKeySign, HSM_NO_GUARD, proc_signed, STATE_SIGNED)
    std::vector<HSM_Transition_T> state_STATE_EMPTY_Trans = {
        {EVT_TypedKeyDot,HSM_NO_GUARD,onError,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "onError"},
        {EVT_TypedKeyEnter,HSM_NO_GUARD,prompt_reset,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "prompt_reset"},
        {EVT_TypedKeyOther,HSM_NO_GUARD,onError,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "onError"},
        {EVT_TypedKeyNumber0, HSM_NO_GUARD, proc_lead0, STATE_LEAD0, HSM_NO_HISTORY_STATE, "", "proc_lead0"},
        {EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_int, STATE_INTEGER, HSM_NO_HISTORY_STATE, "", "proc_int"},
        {EVT_TypedKeySign, HSM_NO_GUARD, proc_signed, STATE_SIGNED, HSM_NO_HISTORY_STATE, "", "proc_signed"},
    };
  // HSM_END_STATE(STATE_EMPTY)
    state_STATE_EMPTY.setTransTable(state_STATE_EMPTY_Trans);
    stateList.push_back(state_STATE_EMPTY);

  /*=================== STATE: STATE_DECIMAL ===============================*/
  // HSM_SIMPLE_STATE(STATE_DECIMAL, STATE_TYPING, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_DECIMAL(HSM_SKIND_SIMPLE, STATE_DECIMAL, "STATE_DECIMAL", STATE_TYPING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber0, HSM_NO_GUARD, proc_decimal)
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_decimal)
    std::vector<HSM_Transition_T> state_STATE_DECIMAL_Trans = {
        {EVT_TypedKeyNumber0,HSM_NO_GUARD,proc_decimal,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_decimal"},
        {EVT_TypedKeyNumber1_9, HSM_NO_GUARD,proc_decimal, HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_decimal"},
    };
  // HSM_END_STATE(STATE_DECIMAL)
    state_STATE_DECIMAL.setTransTable(state_STATE_DECIMAL_Trans);
    stateList.push_back(state_STATE_DECIMAL);

  /*=================== STATE: STATE_INTEGER ===============================*/
  // HSM_SIMPLE_STATE(STATE_INTEGER, STATE_TYPING, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_INTEGER(HSM_SKIND_SIMPLE, STATE_INTEGER, "STATE_INTEGER", STATE_TYPING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber0, HSM_NO_GUARD, proc_int)
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_int)
    // HSM_TRANSITION(EVT_TypedKeyDot, HSM_NO_GUARD, proc_dot, STATE_DECIMAL)
    std::vector<HSM_Transition_T> state_STATE_INTEGER_Trans = {
        {EVT_TypedKeyNumber0,HSM_NO_GUARD,proc_int,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_int"},
        {EVT_TypedKeyNumber1_9,HSM_NO_GUARD,proc_int,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "proc_int"},
        {EVT_TypedKeyDot, HSM_NO_GUARD, proc_dot, STATE_DECIMAL, HSM_NO_HISTORY_STATE, "", "proc_dot"},
    };
  // HSM_END_STATE(STATE_INTEGER)
    state_STATE_INTEGER.setTransTable(state_STATE_INTEGER_Trans);
    stateList.push_back(state_STATE_INTEGER);

  /*=================== STATE: STATE_LEAD0 ===============================*/
  // HSM_SIMPLE_STATE(STATE_LEAD0, STATE_TYPING, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_LEAD0(HSM_SKIND_SIMPLE, STATE_LEAD0, "STATE_LEAD0", STATE_TYPING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber0, HSM_NO_GUARD, onError)
    // HSM_INTERNAL_TRANSITION(EVT_TypedKeyNumber1_9, HSM_NO_GUARD, onError)
    // HSM_TRANSITION(EVT_TypedKeyDot, HSM_NO_GUARD, proc_dot, STATE_DECIMAL)
    std::vector<HSM_Transition_T> state_STATE_LEAD0_Trans = {
        {EVT_TypedKeyNumber0,HSM_NO_GUARD,onError,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "onError"},
        {EVT_TypedKeyNumber1_9,HSM_NO_GUARD,onError,HSM_SAME_STATE, HSM_NO_HISTORY_STATE, "", "onError"},
        {EVT_TypedKeyDot, HSM_NO_GUARD, proc_dot, STATE_DECIMAL, HSM_NO_HISTORY_STATE, "", "proc_dot"},
    };
  // HSM_END_STATE(STATE_LEAD0)
    state_STATE_LEAD0.setTransTable(state_STATE_LEAD0_Trans);
    stateList.push_back(state_STATE_LEAD0);

  /*=================== STATE: STATE_SIGNED ===============================*/
  // HSM_SIMPLE_STATE(STATE_SIGNED, STATE_TYPING, HSM_NO_ACTION, HSM_NO_ACTION)
    HSM_State_T state_STATE_SIGNED(HSM_SKIND_SIMPLE, STATE_SIGNED, "STATE_SIGNED", STATE_TYPING, HSM_NO_INITIAL_STATE, HSM_NO_HISTORY_STATE, HSM_NO_ACTION, HSM_NO_ACTION, "", "");
    // HSM_TRANSITION(EVT_TypedKeyNumber0, HSM_NO_GUARD, proc_lead0, STATE_LEAD0)
    // HSM_TRANSITION(EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_int, STATE_INTEGER)
    std::vector<HSM_Transition_T> state_STATE_SIGNED_Trans = {
        {EVT_TypedKeyNumber0,HSM_NO_GUARD,proc_lead0,STATE_LEAD0, HSM_NO_HISTORY_STATE, "", "proc_lead0"},
        {EVT_TypedKeyNumber1_9, HSM_NO_GUARD, proc_int, STATE_INTEGER, HSM_NO_HISTORY_STATE, "", "proc_int"},
    };
  // HSM_END_STATE(STATE_SIGNED)
    state_STATE_SIGNED.setTransTable(state_STATE_SIGNED_Trans);
    stateList.push_back(state_STATE_SIGNED);

//HSM_END(XSERVICE_MGR_HSM)
    dfn.stateList = stateList;
    return true;
}

/**
 * This function is called to start the TboxAudioMgr HSM.
 */
void XService_HSM_Start(void) {
    printf("%s\n", __func__);
    HSM_State_Definition_T XSERVICE_MGR_HSM_Defn;
    build_state_table(XSERVICE_MGR_HSM_Defn);

    memset(&gs_xservice_hsm_object, 0, sizeof(gs_xservice_hsm_object));
    mHsm->start(XSERVICE_MGR_HSM_Defn, &gs_xservice_hsm_object);
}

bool XService_HSM_ProcMessage(int event, const void * pdata, const size_t data_size) {
    bool event_used = true;
    (void)data_size;
    if (pdata == NULL) {
        /* pdata can be empty; */
    }
    std::vector<uint8_t> data((uint8_t *)pdata, (uint8_t *)pdata+data_size);
    HSM_Log("!!!!!!!!!!!!!!%s event:%d-%s\n", __func__, event, getEventName(event).c_str());
    mHsm->proccessMessage(event, data);
    return event_used;
}

