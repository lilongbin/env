// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itbox.proto

#ifndef PROTOBUF_itbox_2eproto__INCLUDED
#define PROTOBUF_itbox_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RadioInterfaceTBox {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_itbox_2eproto();
void protobuf_AssignDesc_itbox_2eproto();
void protobuf_ShutdownFile_itbox_2eproto();

class RadioTxCommunicationSyncNotify;
class RadioInfo;

enum CommandID {
  eCmd_RadioTxCommunicationSyncNotify = 0,
  eCmd_TBoxTxCommunicationHandShakeNotify = 1,
  eCmd_RadioTxGetTBoxSupportFunctionReq = 2,
  eCmd_TBoxTxGetTBoxSupportFunctionAck = 3,
  eCmd_TBoxTxTBoxKeepAliveReq = 4,
  eCmd_RadioTxTBoxKeepAliveAck = 5,
  eCmd_RadioTxCommunicationGoodbyeNotify = 6
};
bool CommandID_IsValid(int value);
const CommandID CommandID_MIN = eCmd_RadioTxCommunicationSyncNotify;
const CommandID CommandID_MAX = eCmd_RadioTxCommunicationGoodbyeNotify;
const int CommandID_ARRAYSIZE = CommandID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandID_descriptor();
inline const ::std::string& CommandID_Name(CommandID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandID_descriptor(), value);
}
inline bool CommandID_Parse(
    const ::std::string& name, CommandID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandID>(
    CommandID_descriptor(), name, value);
}
enum MessageHeaderFlag {
  MHF_MsgTypeRequest = 1,
  MHF_MsgTypeReply = 2,
  MHF_MsgTypeNotification = 4
};
bool MessageHeaderFlag_IsValid(int value);
const MessageHeaderFlag MessageHeaderFlag_MIN = MHF_MsgTypeRequest;
const MessageHeaderFlag MessageHeaderFlag_MAX = MHF_MsgTypeNotification;
const int MessageHeaderFlag_ARRAYSIZE = MessageHeaderFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageHeaderFlag_descriptor();
inline const ::std::string& MessageHeaderFlag_Name(MessageHeaderFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageHeaderFlag_descriptor(), value);
}
inline bool MessageHeaderFlag_Parse(
    const ::std::string& name, MessageHeaderFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageHeaderFlag>(
    MessageHeaderFlag_descriptor(), name, value);
}
// ===================================================================

class RadioTxCommunicationSyncNotify : public ::google::protobuf::Message {
 public:
  RadioTxCommunicationSyncNotify();
  virtual ~RadioTxCommunicationSyncNotify();

  RadioTxCommunicationSyncNotify(const RadioTxCommunicationSyncNotify& from);

  inline RadioTxCommunicationSyncNotify& operator=(const RadioTxCommunicationSyncNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadioTxCommunicationSyncNotify& default_instance();

  void Swap(RadioTxCommunicationSyncNotify* other);

  // implements Message ----------------------------------------------

  RadioTxCommunicationSyncNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadioTxCommunicationSyncNotify& from);
  void MergeFrom(const RadioTxCommunicationSyncNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Sync = 1;
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 1;
  inline bool sync() const;
  inline void set_sync(bool value);

  // required .RadioInterfaceTBox.RadioInfo RadioBasicInfo = 2;
  inline bool has_radiobasicinfo() const;
  inline void clear_radiobasicinfo();
  static const int kRadioBasicInfoFieldNumber = 2;
  inline const ::RadioInterfaceTBox::RadioInfo& radiobasicinfo() const;
  inline ::RadioInterfaceTBox::RadioInfo* mutable_radiobasicinfo();
  inline ::RadioInterfaceTBox::RadioInfo* release_radiobasicinfo();
  inline void set_allocated_radiobasicinfo(::RadioInterfaceTBox::RadioInfo* radiobasicinfo);

  // required string RadioInformation = 3;
  inline bool has_radioinformation() const;
  inline void clear_radioinformation();
  static const int kRadioInformationFieldNumber = 3;
  inline const ::std::string& radioinformation() const;
  inline void set_radioinformation(const ::std::string& value);
  inline void set_radioinformation(const char* value);
  inline void set_radioinformation(const char* value, size_t size);
  inline ::std::string* mutable_radioinformation();
  inline ::std::string* release_radioinformation();
  inline void set_allocated_radioinformation(::std::string* radioinformation);

  // required uint32 SyncSerialNumber = 4;
  inline bool has_syncserialnumber() const;
  inline void clear_syncserialnumber();
  static const int kSyncSerialNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 syncserialnumber() const;
  inline void set_syncserialnumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RadioInterfaceTBox.RadioTxCommunicationSyncNotify)
 private:
  inline void set_has_sync();
  inline void clear_has_sync();
  inline void set_has_radiobasicinfo();
  inline void clear_has_radiobasicinfo();
  inline void set_has_radioinformation();
  inline void clear_has_radioinformation();
  inline void set_has_syncserialnumber();
  inline void clear_has_syncserialnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RadioInterfaceTBox::RadioInfo* radiobasicinfo_;
  bool sync_;
  ::google::protobuf::uint32 syncserialnumber_;
  ::std::string* radioinformation_;
  friend void  protobuf_AddDesc_itbox_2eproto();
  friend void protobuf_AssignDesc_itbox_2eproto();
  friend void protobuf_ShutdownFile_itbox_2eproto();

  void InitAsDefaultInstance();
  static RadioTxCommunicationSyncNotify* default_instance_;
};
// -------------------------------------------------------------------

class RadioInfo : public ::google::protobuf::Message {
 public:
  RadioInfo();
  virtual ~RadioInfo();

  RadioInfo(const RadioInfo& from);

  inline RadioInfo& operator=(const RadioInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadioInfo& default_instance();

  void Swap(RadioInfo* other);

  // implements Message ----------------------------------------------

  RadioInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadioInfo& from);
  void MergeFrom(const RadioInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string RadioHMIVersion = 1;
  inline bool has_radiohmiversion() const;
  inline void clear_radiohmiversion();
  static const int kRadioHMIVersionFieldNumber = 1;
  inline const ::std::string& radiohmiversion() const;
  inline void set_radiohmiversion(const ::std::string& value);
  inline void set_radiohmiversion(const char* value);
  inline void set_radiohmiversion(const char* value, size_t size);
  inline ::std::string* mutable_radiohmiversion();
  inline ::std::string* release_radiohmiversion();
  inline void set_allocated_radiohmiversion(::std::string* radiohmiversion);

  // required string RadioForTBoxServiceVersion = 2;
  inline bool has_radiofortboxserviceversion() const;
  inline void clear_radiofortboxserviceversion();
  static const int kRadioForTBoxServiceVersionFieldNumber = 2;
  inline const ::std::string& radiofortboxserviceversion() const;
  inline void set_radiofortboxserviceversion(const ::std::string& value);
  inline void set_radiofortboxserviceversion(const char* value);
  inline void set_radiofortboxserviceversion(const char* value, size_t size);
  inline ::std::string* mutable_radiofortboxserviceversion();
  inline ::std::string* release_radiofortboxserviceversion();
  inline void set_allocated_radiofortboxserviceversion(::std::string* radiofortboxserviceversion);

  // required string CommunicationProtocolVersion = 3;
  inline bool has_communicationprotocolversion() const;
  inline void clear_communicationprotocolversion();
  static const int kCommunicationProtocolVersionFieldNumber = 3;
  inline const ::std::string& communicationprotocolversion() const;
  inline void set_communicationprotocolversion(const ::std::string& value);
  inline void set_communicationprotocolversion(const char* value);
  inline void set_communicationprotocolversion(const char* value, size_t size);
  inline ::std::string* mutable_communicationprotocolversion();
  inline ::std::string* release_communicationprotocolversion();
  inline void set_allocated_communicationprotocolversion(::std::string* communicationprotocolversion);

  // @@protoc_insertion_point(class_scope:RadioInterfaceTBox.RadioInfo)
 private:
  inline void set_has_radiohmiversion();
  inline void clear_has_radiohmiversion();
  inline void set_has_radiofortboxserviceversion();
  inline void clear_has_radiofortboxserviceversion();
  inline void set_has_communicationprotocolversion();
  inline void clear_has_communicationprotocolversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* radiohmiversion_;
  ::std::string* radiofortboxserviceversion_;
  ::std::string* communicationprotocolversion_;
  friend void  protobuf_AddDesc_itbox_2eproto();
  friend void protobuf_AssignDesc_itbox_2eproto();
  friend void protobuf_ShutdownFile_itbox_2eproto();

  void InitAsDefaultInstance();
  static RadioInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// RadioTxCommunicationSyncNotify

// required bool Sync = 1;
inline bool RadioTxCommunicationSyncNotify::has_sync() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadioTxCommunicationSyncNotify::set_has_sync() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadioTxCommunicationSyncNotify::clear_has_sync() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadioTxCommunicationSyncNotify::clear_sync() {
  sync_ = false;
  clear_has_sync();
}
inline bool RadioTxCommunicationSyncNotify::sync() const {
  // @@protoc_insertion_point(field_get:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.Sync)
  return sync_;
}
inline void RadioTxCommunicationSyncNotify::set_sync(bool value) {
  set_has_sync();
  sync_ = value;
  // @@protoc_insertion_point(field_set:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.Sync)
}

// required .RadioInterfaceTBox.RadioInfo RadioBasicInfo = 2;
inline bool RadioTxCommunicationSyncNotify::has_radiobasicinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadioTxCommunicationSyncNotify::set_has_radiobasicinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadioTxCommunicationSyncNotify::clear_has_radiobasicinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadioTxCommunicationSyncNotify::clear_radiobasicinfo() {
  if (radiobasicinfo_ != NULL) radiobasicinfo_->::RadioInterfaceTBox::RadioInfo::Clear();
  clear_has_radiobasicinfo();
}
inline const ::RadioInterfaceTBox::RadioInfo& RadioTxCommunicationSyncNotify::radiobasicinfo() const {
  // @@protoc_insertion_point(field_get:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioBasicInfo)
  return radiobasicinfo_ != NULL ? *radiobasicinfo_ : *default_instance_->radiobasicinfo_;
}
inline ::RadioInterfaceTBox::RadioInfo* RadioTxCommunicationSyncNotify::mutable_radiobasicinfo() {
  set_has_radiobasicinfo();
  if (radiobasicinfo_ == NULL) radiobasicinfo_ = new ::RadioInterfaceTBox::RadioInfo;
  // @@protoc_insertion_point(field_mutable:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioBasicInfo)
  return radiobasicinfo_;
}
inline ::RadioInterfaceTBox::RadioInfo* RadioTxCommunicationSyncNotify::release_radiobasicinfo() {
  clear_has_radiobasicinfo();
  ::RadioInterfaceTBox::RadioInfo* temp = radiobasicinfo_;
  radiobasicinfo_ = NULL;
  return temp;
}
inline void RadioTxCommunicationSyncNotify::set_allocated_radiobasicinfo(::RadioInterfaceTBox::RadioInfo* radiobasicinfo) {
  delete radiobasicinfo_;
  radiobasicinfo_ = radiobasicinfo;
  if (radiobasicinfo) {
    set_has_radiobasicinfo();
  } else {
    clear_has_radiobasicinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioBasicInfo)
}

// required string RadioInformation = 3;
inline bool RadioTxCommunicationSyncNotify::has_radioinformation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadioTxCommunicationSyncNotify::set_has_radioinformation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadioTxCommunicationSyncNotify::clear_has_radioinformation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadioTxCommunicationSyncNotify::clear_radioinformation() {
  if (radioinformation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radioinformation_->clear();
  }
  clear_has_radioinformation();
}
inline const ::std::string& RadioTxCommunicationSyncNotify::radioinformation() const {
  // @@protoc_insertion_point(field_get:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioInformation)
  return *radioinformation_;
}
inline void RadioTxCommunicationSyncNotify::set_radioinformation(const ::std::string& value) {
  set_has_radioinformation();
  if (radioinformation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radioinformation_ = new ::std::string;
  }
  radioinformation_->assign(value);
  // @@protoc_insertion_point(field_set:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioInformation)
}
inline void RadioTxCommunicationSyncNotify::set_radioinformation(const char* value) {
  set_has_radioinformation();
  if (radioinformation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radioinformation_ = new ::std::string;
  }
  radioinformation_->assign(value);
  // @@protoc_insertion_point(field_set_char:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioInformation)
}
inline void RadioTxCommunicationSyncNotify::set_radioinformation(const char* value, size_t size) {
  set_has_radioinformation();
  if (radioinformation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radioinformation_ = new ::std::string;
  }
  radioinformation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioInformation)
}
inline ::std::string* RadioTxCommunicationSyncNotify::mutable_radioinformation() {
  set_has_radioinformation();
  if (radioinformation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radioinformation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioInformation)
  return radioinformation_;
}
inline ::std::string* RadioTxCommunicationSyncNotify::release_radioinformation() {
  clear_has_radioinformation();
  if (radioinformation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radioinformation_;
    radioinformation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadioTxCommunicationSyncNotify::set_allocated_radioinformation(::std::string* radioinformation) {
  if (radioinformation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radioinformation_;
  }
  if (radioinformation) {
    set_has_radioinformation();
    radioinformation_ = radioinformation;
  } else {
    clear_has_radioinformation();
    radioinformation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.RadioInformation)
}

// required uint32 SyncSerialNumber = 4;
inline bool RadioTxCommunicationSyncNotify::has_syncserialnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadioTxCommunicationSyncNotify::set_has_syncserialnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadioTxCommunicationSyncNotify::clear_has_syncserialnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadioTxCommunicationSyncNotify::clear_syncserialnumber() {
  syncserialnumber_ = 0u;
  clear_has_syncserialnumber();
}
inline ::google::protobuf::uint32 RadioTxCommunicationSyncNotify::syncserialnumber() const {
  // @@protoc_insertion_point(field_get:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.SyncSerialNumber)
  return syncserialnumber_;
}
inline void RadioTxCommunicationSyncNotify::set_syncserialnumber(::google::protobuf::uint32 value) {
  set_has_syncserialnumber();
  syncserialnumber_ = value;
  // @@protoc_insertion_point(field_set:RadioInterfaceTBox.RadioTxCommunicationSyncNotify.SyncSerialNumber)
}

// -------------------------------------------------------------------

// RadioInfo

// required string RadioHMIVersion = 1;
inline bool RadioInfo::has_radiohmiversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadioInfo::set_has_radiohmiversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadioInfo::clear_has_radiohmiversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadioInfo::clear_radiohmiversion() {
  if (radiohmiversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiohmiversion_->clear();
  }
  clear_has_radiohmiversion();
}
inline const ::std::string& RadioInfo::radiohmiversion() const {
  // @@protoc_insertion_point(field_get:RadioInterfaceTBox.RadioInfo.RadioHMIVersion)
  return *radiohmiversion_;
}
inline void RadioInfo::set_radiohmiversion(const ::std::string& value) {
  set_has_radiohmiversion();
  if (radiohmiversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiohmiversion_ = new ::std::string;
  }
  radiohmiversion_->assign(value);
  // @@protoc_insertion_point(field_set:RadioInterfaceTBox.RadioInfo.RadioHMIVersion)
}
inline void RadioInfo::set_radiohmiversion(const char* value) {
  set_has_radiohmiversion();
  if (radiohmiversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiohmiversion_ = new ::std::string;
  }
  radiohmiversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:RadioInterfaceTBox.RadioInfo.RadioHMIVersion)
}
inline void RadioInfo::set_radiohmiversion(const char* value, size_t size) {
  set_has_radiohmiversion();
  if (radiohmiversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiohmiversion_ = new ::std::string;
  }
  radiohmiversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RadioInterfaceTBox.RadioInfo.RadioHMIVersion)
}
inline ::std::string* RadioInfo::mutable_radiohmiversion() {
  set_has_radiohmiversion();
  if (radiohmiversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiohmiversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RadioInterfaceTBox.RadioInfo.RadioHMIVersion)
  return radiohmiversion_;
}
inline ::std::string* RadioInfo::release_radiohmiversion() {
  clear_has_radiohmiversion();
  if (radiohmiversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radiohmiversion_;
    radiohmiversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadioInfo::set_allocated_radiohmiversion(::std::string* radiohmiversion) {
  if (radiohmiversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiohmiversion_;
  }
  if (radiohmiversion) {
    set_has_radiohmiversion();
    radiohmiversion_ = radiohmiversion;
  } else {
    clear_has_radiohmiversion();
    radiohmiversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RadioInterfaceTBox.RadioInfo.RadioHMIVersion)
}

// required string RadioForTBoxServiceVersion = 2;
inline bool RadioInfo::has_radiofortboxserviceversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadioInfo::set_has_radiofortboxserviceversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadioInfo::clear_has_radiofortboxserviceversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadioInfo::clear_radiofortboxserviceversion() {
  if (radiofortboxserviceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiofortboxserviceversion_->clear();
  }
  clear_has_radiofortboxserviceversion();
}
inline const ::std::string& RadioInfo::radiofortboxserviceversion() const {
  // @@protoc_insertion_point(field_get:RadioInterfaceTBox.RadioInfo.RadioForTBoxServiceVersion)
  return *radiofortboxserviceversion_;
}
inline void RadioInfo::set_radiofortboxserviceversion(const ::std::string& value) {
  set_has_radiofortboxserviceversion();
  if (radiofortboxserviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiofortboxserviceversion_ = new ::std::string;
  }
  radiofortboxserviceversion_->assign(value);
  // @@protoc_insertion_point(field_set:RadioInterfaceTBox.RadioInfo.RadioForTBoxServiceVersion)
}
inline void RadioInfo::set_radiofortboxserviceversion(const char* value) {
  set_has_radiofortboxserviceversion();
  if (radiofortboxserviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiofortboxserviceversion_ = new ::std::string;
  }
  radiofortboxserviceversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:RadioInterfaceTBox.RadioInfo.RadioForTBoxServiceVersion)
}
inline void RadioInfo::set_radiofortboxserviceversion(const char* value, size_t size) {
  set_has_radiofortboxserviceversion();
  if (radiofortboxserviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiofortboxserviceversion_ = new ::std::string;
  }
  radiofortboxserviceversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RadioInterfaceTBox.RadioInfo.RadioForTBoxServiceVersion)
}
inline ::std::string* RadioInfo::mutable_radiofortboxserviceversion() {
  set_has_radiofortboxserviceversion();
  if (radiofortboxserviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radiofortboxserviceversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RadioInterfaceTBox.RadioInfo.RadioForTBoxServiceVersion)
  return radiofortboxserviceversion_;
}
inline ::std::string* RadioInfo::release_radiofortboxserviceversion() {
  clear_has_radiofortboxserviceversion();
  if (radiofortboxserviceversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radiofortboxserviceversion_;
    radiofortboxserviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadioInfo::set_allocated_radiofortboxserviceversion(::std::string* radiofortboxserviceversion) {
  if (radiofortboxserviceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radiofortboxserviceversion_;
  }
  if (radiofortboxserviceversion) {
    set_has_radiofortboxserviceversion();
    radiofortboxserviceversion_ = radiofortboxserviceversion;
  } else {
    clear_has_radiofortboxserviceversion();
    radiofortboxserviceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RadioInterfaceTBox.RadioInfo.RadioForTBoxServiceVersion)
}

// required string CommunicationProtocolVersion = 3;
inline bool RadioInfo::has_communicationprotocolversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadioInfo::set_has_communicationprotocolversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadioInfo::clear_has_communicationprotocolversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadioInfo::clear_communicationprotocolversion() {
  if (communicationprotocolversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    communicationprotocolversion_->clear();
  }
  clear_has_communicationprotocolversion();
}
inline const ::std::string& RadioInfo::communicationprotocolversion() const {
  // @@protoc_insertion_point(field_get:RadioInterfaceTBox.RadioInfo.CommunicationProtocolVersion)
  return *communicationprotocolversion_;
}
inline void RadioInfo::set_communicationprotocolversion(const ::std::string& value) {
  set_has_communicationprotocolversion();
  if (communicationprotocolversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    communicationprotocolversion_ = new ::std::string;
  }
  communicationprotocolversion_->assign(value);
  // @@protoc_insertion_point(field_set:RadioInterfaceTBox.RadioInfo.CommunicationProtocolVersion)
}
inline void RadioInfo::set_communicationprotocolversion(const char* value) {
  set_has_communicationprotocolversion();
  if (communicationprotocolversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    communicationprotocolversion_ = new ::std::string;
  }
  communicationprotocolversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:RadioInterfaceTBox.RadioInfo.CommunicationProtocolVersion)
}
inline void RadioInfo::set_communicationprotocolversion(const char* value, size_t size) {
  set_has_communicationprotocolversion();
  if (communicationprotocolversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    communicationprotocolversion_ = new ::std::string;
  }
  communicationprotocolversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RadioInterfaceTBox.RadioInfo.CommunicationProtocolVersion)
}
inline ::std::string* RadioInfo::mutable_communicationprotocolversion() {
  set_has_communicationprotocolversion();
  if (communicationprotocolversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    communicationprotocolversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RadioInterfaceTBox.RadioInfo.CommunicationProtocolVersion)
  return communicationprotocolversion_;
}
inline ::std::string* RadioInfo::release_communicationprotocolversion() {
  clear_has_communicationprotocolversion();
  if (communicationprotocolversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = communicationprotocolversion_;
    communicationprotocolversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadioInfo::set_allocated_communicationprotocolversion(::std::string* communicationprotocolversion) {
  if (communicationprotocolversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete communicationprotocolversion_;
  }
  if (communicationprotocolversion) {
    set_has_communicationprotocolversion();
    communicationprotocolversion_ = communicationprotocolversion;
  } else {
    clear_has_communicationprotocolversion();
    communicationprotocolversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RadioInterfaceTBox.RadioInfo.CommunicationProtocolVersion)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RadioInterfaceTBox

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RadioInterfaceTBox::CommandID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RadioInterfaceTBox::CommandID>() {
  return ::RadioInterfaceTBox::CommandID_descriptor();
}
template <> struct is_proto_enum< ::RadioInterfaceTBox::MessageHeaderFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RadioInterfaceTBox::MessageHeaderFlag>() {
  return ::RadioInterfaceTBox::MessageHeaderFlag_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_itbox_2eproto__INCLUDED
